package com.example.demo.controller;

import java.security.Principal;
import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.AppUser;
import com.example.demo.model.Course;
import com.example.demo.repository.UserRepository;
import com.example.demo.service.CourseService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/courses")
@RequiredArgsConstructor
public class CourseController {

    private final CourseService courseService;
    private final UserRepository userRepository;

    //–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
    @GetMapping
    public ResponseEntity<List<Course>> getAllCourses() {
        return ResponseEntity.ok(courseService.getAllCourses());
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø–æ ID
    @GetMapping("/{id}")
    public ResponseEntity<?> getCourseById(@PathVariable Long id) {
        try {
            Course course = courseService.getCourseById(id);
            return ResponseEntity.ok(course);
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }

    //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN)
    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/{id}")
    public ResponseEntity<?> updateCourse(@PathVariable Long id, @RequestBody Course updatedCourse) {
        try {
            Course course = courseService.updateCourse(id, updatedCourse);
            return ResponseEntity.ok(course);
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN)
    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteCourse(@PathVariable Long id) {
        try {
            courseService.deleteCourse(id);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }
    //–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫—É—Ä—Å
    @PostMapping("/{courseId}/register")
    public ResponseEntity<String> registerToCourse(@PathVariable Long courseId, Principal principal) {
        try {
            AppUser user = userRepository.findByUsername(principal.getName())
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

            courseService.registerUserToCourse(courseId, user);

            return ResponseEntity.ok("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å!");
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
    //–£–¥–∞–ª–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞
    @DeleteMapping("/{courseId}/remove/{userId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> removeUserFromCourse(
            @PathVariable Long courseId,
            @PathVariable Long userId) {
        try {
            AppUser user = userRepository.findById(userId)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            courseService.removeUserFromCourse(courseId, user);
            return ResponseEntity.ok("üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω —Å –∫—É—Ä—Å–∞");
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }


    //–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    @GetMapping("/{courseId}/students")
    public ResponseEntity<List<AppUser>> findStudentsByCourse(
            @PathVariable Long courseId,
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String email) {
    
        List<AppUser> users;
        if (name == null && email == null) {
            users = userRepository.findUsersByCourseOnly(courseId);
        } else {
            users = userRepository.findUsersByCourseAndFilter(courseId,
                    name == null ? "" : name,
                    email == null ? "" : email);
        }
    
        return ResponseEntity.ok(users);
    }
    



}
